# Generated by Django 5.2.5 on 2025-08-11 14:25

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CheckoutSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "session_id",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Session ID"
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0.01)],
                        verbose_name="Amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="INR", max_length=3, verbose_name="Currency"
                    ),
                ),
                (
                    "processing_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Processing Fee",
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0.01)],
                        verbose_name="Total Amount",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                            ("EXPIRED", "Expired"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                ("expires_at", models.DateTimeField(verbose_name="Expires At")),
                (
                    "payment_intent_id",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Payment Intent ID"
                    ),
                ),
                (
                    "checkout_url",
                    models.URLField(blank=True, verbose_name="Checkout URL"),
                ),
                (
                    "metadata",
                    models.JSONField(blank=True, default=dict, verbose_name="Metadata"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "paid_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="Paid At"),
                ),
                (
                    "cancelled_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Cancelled At"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="checkout_sessions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Checkout Session",
                "verbose_name_plural": "Checkout Sessions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Method Name"
                    ),
                ),
                (
                    "method_type",
                    models.CharField(
                        choices=[
                            ("CREDIT_CARD", "Credit Card"),
                            ("DEBIT_CARD", "Debit Card"),
                            ("BANK_TRANSFER", "Bank Transfer"),
                            ("DIGITAL_WALLET", "Digital Wallet"),
                            ("UPI", "UPI"),
                            ("NET_BANKING", "Net Banking"),
                            ("CASH", "Cash"),
                            ("CHEQUE", "Cheque"),
                        ],
                        max_length=20,
                        verbose_name="Method Type",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("STRIPE", "Stripe"),
                            ("RAZORPAY", "Razorpay"),
                            ("PAYTM", "Paytm"),
                            ("PHONEPE", "PhonePe"),
                            ("GOOGLE_PAY", "Google Pay"),
                            ("APPLE_PAY", "Apple Pay"),
                            ("BANK", "Bank"),
                            ("CASH", "Cash"),
                        ],
                        max_length=20,
                        verbose_name="Provider",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Icon Class"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "is_default",
                    models.BooleanField(default=False, verbose_name="Is Default"),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(default=0, verbose_name="Sort Order"),
                ),
                (
                    "processing_fee_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Processing Fee Percentage",
                    ),
                ),
                (
                    "processing_fee_fixed",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Fixed Processing Fee",
                    ),
                ),
                (
                    "minimum_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Minimum Amount",
                    ),
                ),
                (
                    "maximum_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=999999.99,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Maximum Amount",
                    ),
                ),
                (
                    "provider_config",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Provider Configuration"
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Method",
                "verbose_name_plural": "Payment Methods",
                "ordering": ["sort_order", "name"],
                "indexes": [
                    models.Index(
                        fields=["method_type", "is_active"],
                        name="payments_pa_method__ea5953_idx",
                    ),
                    models.Index(
                        fields=["provider", "is_active"],
                        name="payments_pa_provide_56b8bd_idx",
                    ),
                    models.Index(
                        fields=["is_default"], name="payments_pa_is_defa_9c26a9_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "payment_id",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Payment ID"
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0.01)],
                        verbose_name="Amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="INR", max_length=3, verbose_name="Currency"
                    ),
                ),
                (
                    "processing_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Processing Fee",
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0.01)],
                        verbose_name="Total Amount",
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("RENTAL_PAYMENT", "Rental Payment"),
                            ("DEPOSIT", "Security Deposit"),
                            ("LATE_FEE", "Late Return Fee"),
                            ("DAMAGE_FEE", "Damage Fee"),
                            ("SUBSCRIPTION", "Subscription Payment"),
                            ("REFUND", "Refund"),
                            ("ADJUSTMENT", "Adjustment"),
                        ],
                        max_length=20,
                        verbose_name="Transaction Type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                            ("REFUNDED", "Refunded"),
                            ("PARTIALLY_REFUNDED", "Partially Refunded"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "provider_payment_id",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Provider Payment ID"
                    ),
                ),
                (
                    "provider_transaction_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        verbose_name="Provider Transaction ID",
                    ),
                ),
                (
                    "payment_intent_id",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Payment Intent ID"
                    ),
                ),
                (
                    "payment_method_details",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Payment Method Details"
                    ),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Processed At"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Completed At"
                    ),
                ),
                (
                    "failed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Failed At"
                    ),
                ),
                (
                    "error_code",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Error Code"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="Error Message"),
                ),
                (
                    "metadata",
                    models.JSONField(blank=True, default=dict, verbose_name="Metadata"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "checkout_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="payments.checkoutsession",
                        verbose_name="Checkout Session",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_payments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_payments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated By",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
                (
                    "payment_method",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="payments",
                        to="payments.paymentmethod",
                        verbose_name="Payment Method",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment",
                "verbose_name_plural": "Payments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="checkoutsession",
            name="payment_method",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="checkout_sessions",
                to="payments.paymentmethod",
                verbose_name="Payment Method",
            ),
        ),
        migrations.CreateModel(
            name="PaymentRefund",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "refund_id",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Refund ID"
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0.01)],
                        verbose_name="Refund Amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="INR", max_length=3, verbose_name="Currency"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("REQUESTED_BY_CUSTOMER", "Requested by Customer"),
                            ("DUPLICATE", "Duplicate Payment"),
                            ("FRAUDULENT", "Fraudulent Payment"),
                            ("PRODUCT_NOT_RECEIVED", "Product Not Received"),
                            ("PRODUCT_DEFECTIVE", "Product Defective"),
                            ("SERVICE_NOT_PROVIDED", "Service Not Provided"),
                            ("ADMINISTRATIVE", "Administrative"),
                            ("OTHER", "Other"),
                        ],
                        max_length=30,
                        verbose_name="Refund Reason",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "provider_refund_id",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Provider Refund ID"
                    ),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Processed At"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Completed At"
                    ),
                ),
                (
                    "failed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Failed At"
                    ),
                ),
                (
                    "error_code",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Error Code"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="Error Message"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_refunds",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "payment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="refunds",
                        to="payments.payment",
                        verbose_name="Payment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="refunds",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Refund",
                "verbose_name_plural": "Payment Refunds",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentWebhook",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "webhook_id",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Webhook ID"
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("STRIPE", "Stripe"),
                            ("RAZORPAY", "Razorpay"),
                            ("PAYTM", "Paytm"),
                            ("PHONEPE", "PhonePe"),
                            ("GOOGLE_PAY", "Google Pay"),
                            ("APPLE_PAY", "Apple Pay"),
                            ("BANK", "Bank"),
                            ("CASH", "Cash"),
                        ],
                        max_length=20,
                        verbose_name="Provider",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("PAYMENT_INTENT_CREATED", "Payment Intent Created"),
                            ("PAYMENT_INTENT_SUCCEEDED", "Payment Intent Succeeded"),
                            ("PAYMENT_INTENT_FAILED", "Payment Intent Failed"),
                            ("PAYMENT_INTENT_CANCELLED", "Payment Intent Cancelled"),
                            ("PAYMENT_METHOD_ATTACHED", "Payment Method Attached"),
                            ("PAYMENT_METHOD_DETACHED", "Payment Method Detached"),
                            ("REFUND_CREATED", "Refund Created"),
                            ("REFUND_SUCCEEDED", "Refund Succeeded"),
                            ("REFUND_FAILED", "Refund Failed"),
                        ],
                        max_length=50,
                        verbose_name="Event Type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSED", "Processed"),
                            ("FAILED", "Failed"),
                            ("IGNORED", "Ignored"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                ("event_id", models.CharField(max_length=100, verbose_name="Event ID")),
                (
                    "object_id",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Object ID"
                    ),
                ),
                ("raw_payload", models.TextField(verbose_name="Raw Payload")),
                (
                    "processed_payload",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Processed Payload"
                    ),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Processed At"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="Error Message"),
                ),
                (
                    "retry_count",
                    models.PositiveIntegerField(default=0, verbose_name="Retry Count"),
                ),
                (
                    "headers",
                    models.JSONField(blank=True, default=dict, verbose_name="Headers"),
                ),
                (
                    "signature",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="Signature"
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Webhook",
                "verbose_name_plural": "Payment Webhooks",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["webhook_id"], name="payments_pa_webhook_6828f7_idx"
                    ),
                    models.Index(
                        fields=["provider", "event_type"],
                        name="payments_pa_provide_cbd3d4_idx",
                    ),
                    models.Index(
                        fields=["status", "created_at"],
                        name="payments_pa_status_f210fa_idx",
                    ),
                    models.Index(
                        fields=["event_id"], name="payments_pa_event_i_27bff6_idx"
                    ),
                    models.Index(
                        fields=["object_id"], name="payments_pa_object__cc6269_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["payment_id"], name="payments_pa_payment_6c9e39_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["user", "status"], name="payments_pa_user_id_01767a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["status", "created_at"], name="payments_pa_status_343680_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["transaction_type", "status"],
                name="payments_pa_transac_8b6e68_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["provider_payment_id"], name="payments_pa_provide_adf74c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["payment_intent_id"], name="payments_pa_payment_7ccbf1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="checkoutsession",
            index=models.Index(
                fields=["session_id"], name="payments_ch_session_0ef316_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="checkoutsession",
            index=models.Index(
                fields=["user", "status"], name="payments_ch_user_id_30f601_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="checkoutsession",
            index=models.Index(
                fields=["status", "expires_at"], name="payments_ch_status_0f6377_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="checkoutsession",
            index=models.Index(
                fields=["payment_intent_id"], name="payments_ch_payment_cee610_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="checkoutsession",
            index=models.Index(
                fields=["created_at"], name="payments_ch_created_59d5b7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentrefund",
            index=models.Index(
                fields=["refund_id"], name="payments_pa_refund__7896af_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentrefund",
            index=models.Index(
                fields=["payment", "status"], name="payments_pa_payment_2735e7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentrefund",
            index=models.Index(
                fields=["user", "status"], name="payments_pa_user_id_c6e583_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentrefund",
            index=models.Index(
                fields=["status", "created_at"], name="payments_pa_status_bd676a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentrefund",
            index=models.Index(
                fields=["provider_refund_id"], name="payments_pa_provide_d061a5_idx"
            ),
        ),
    ]
