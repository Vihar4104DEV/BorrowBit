<<<<<<< HEAD
# Generated by Django 5.2.5 on 2025-08-11 11:20
=======
# Generated by Django 5.2.5 on 2025-08-11 12:08
>>>>>>> 820dc79f10db0b2f3469b0f9edcee952c348957c

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
<<<<<<< HEAD
            name="ProductCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Category Name"
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        max_length=100, unique=True, verbose_name="Category Slug"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="category_images/",
                        verbose_name="Category Image",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Icon Class"
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(default=0, verbose_name="Sort Order"),
                ),
                (
                    "is_featured",
                    models.BooleanField(default=False, verbose_name="Is Featured"),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="products.productcategory",
                        verbose_name="Parent Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Category",
                "verbose_name_plural": "Product Categories",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("name", models.CharField(max_length=200, verbose_name="Product Name")),
                (
                    "slug",
                    models.SlugField(
                        max_length=200, unique=True, verbose_name="Product Slug"
                    ),
                ),
                (
                    "sku",
                    models.CharField(max_length=100, unique=True, verbose_name="SKU"),
                ),
                (
                    "short_description",
                    models.TextField(max_length=500, verbose_name="Short Description"),
                ),
                ("description", models.TextField(verbose_name="Long Description")),
                (
                    "specifications",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Specifications"
                    ),
                ),
                (
                    "features",
                    models.JSONField(blank=True, default=list, verbose_name="Features"),
                ),
                (
                    "dimensions",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Dimensions"
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Weight (kg)",
                    ),
                ),
                (
                    "color",
                    models.CharField(blank=True, max_length=50, verbose_name="Color"),
                ),
                (
                    "material",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Material"
                    ),
                ),
                (
                    "brand",
                    models.CharField(blank=True, max_length=100, verbose_name="Brand"),
                ),
                (
                    "model",
                    models.CharField(blank=True, max_length=100, verbose_name="Model"),
                ),
                (
                    "condition",
                    models.CharField(
                        choices=[
                            ("NEW", "New"),
                            ("EXCELLENT", "Excellent"),
                            ("GOOD", "Good"),
                            ("FAIR", "Fair"),
                            ("POOR", "Poor"),
                        ],
                        default="GOOD",
                        max_length=20,
                        verbose_name="Condition",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("AVAILABLE", "Available"),
                            ("RENTED", "Rented"),
                            ("MAINTENANCE", "Under Maintenance"),
                            ("RETIRED", "Retired"),
                            ("RESERVED", "Reserved"),
                        ],
                        default="AVAILABLE",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "total_quantity",
                    models.PositiveIntegerField(
                        default=1, verbose_name="Total Quantity"
                    ),
                ),
                (
                    "available_quantity",
                    models.PositiveIntegerField(
                        default=1, verbose_name="Available Quantity"
                    ),
                ),
                (
                    "reserved_quantity",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Reserved Quantity"
                    ),
                ),
                (
                    "minimum_quantity",
                    models.PositiveIntegerField(
                        default=1, verbose_name="Minimum Quantity"
                    ),
                ),
                (
                    "deposit_amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Security Deposit Amount",
                    ),
                ),
                (
                    "warehouse_location",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Warehouse Location"
                    ),
                ),
                (
                    "storage_requirements",
                    models.TextField(blank=True, verbose_name="Storage Requirements"),
                ),
                (
                    "is_rentable",
                    models.BooleanField(default=True, verbose_name="Is Rentable"),
                ),
                (
                    "minimum_rental_duration",
                    models.PositiveIntegerField(
                        default=1, verbose_name="Minimum Rental Duration (hours)"
                    ),
                ),
                (
                    "maximum_rental_duration",
                    models.PositiveIntegerField(
                        default=8760, verbose_name="Maximum Rental Duration (hours)"
                    ),
                ),
                (
                    "main_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="product_images/",
                        verbose_name="Main Image",
                    ),
                ),
                (
                    "images",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Additional Images"
                    ),
                ),
                (
                    "meta_title",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Meta Title"
                    ),
                ),
                (
                    "meta_description",
                    models.TextField(blank=True, verbose_name="Meta Description"),
                ),
                ("keywords", models.TextField(blank=True, verbose_name="Keywords")),
                (
                    "is_featured",
                    models.BooleanField(default=False, verbose_name="Is Featured"),
                ),
                (
                    "is_popular",
                    models.BooleanField(default=False, verbose_name="Is Popular"),
                ),
                (
                    "admin_approved",
                    models.BooleanField(default=False, verbose_name="Admin Approved"),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(default=0, verbose_name="Sort Order"),
                ),
                (
                    "purchase_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Purchase Date"
                    ),
                ),
                (
                    "warranty_expiry",
                    models.DateField(
                        blank=True, null=True, verbose_name="Warranty Expiry"
                    ),
                ),
                (
                    "last_maintenance",
                    models.DateField(
                        blank=True, null=True, verbose_name="Last Maintenance"
                    ),
                ),
                (
                    "next_maintenance",
                    models.DateField(
                        blank=True, null=True, verbose_name="Next Maintenance"
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_products",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Owner",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="products",
                        to="products.productcategory",
                        verbose_name="Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product",
                "verbose_name_plural": "Products",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="ProductImage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "image",
                    models.ImageField(
                        upload_to="product_images/", verbose_name="Image"
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Alt Text"
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Caption"
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(default=0, verbose_name="Sort Order"),
                ),
                (
                    "is_primary",
                    models.BooleanField(default=False, verbose_name="Is Primary"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_images",
                        to="products.product",
                        verbose_name="Product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Image",
                "verbose_name_plural": "Product Images",
                "ordering": ["product", "sort_order", "-is_primary"],
            },
        ),
        migrations.CreateModel(
            name="ProductMaintenance",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "maintenance_type",
                    models.CharField(
                        choices=[
                            ("PREVENTIVE", "Preventive Maintenance"),
                            ("CORRECTIVE", "Corrective Maintenance"),
                            ("INSPECTION", "Inspection"),
                            ("REPAIR", "Repair"),
                            ("CLEANING", "Cleaning"),
                        ],
                        max_length=20,
                        verbose_name="Maintenance Type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SCHEDULED", "Scheduled"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="SCHEDULED",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                ("scheduled_date", models.DateTimeField(verbose_name="Scheduled Date")),
                (
                    "start_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Start Date"
                    ),
                ),
                (
                    "completed_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Completed Date"
                    ),
                ),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "technician_notes",
                    models.TextField(blank=True, verbose_name="Technician Notes"),
                ),
                (
                    "cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Cost",
                    ),
                ),
                (
                    "assigned_technician",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_maintenance",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Assigned Technician",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenance_records",
                        to="products.product",
                        verbose_name="Product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Maintenance",
                "verbose_name_plural": "Product Maintenance Records",
                "ordering": ["-scheduled_date"],
            },
        ),
        migrations.CreateModel(
            name="ProductPricing",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "customer_type",
                    models.CharField(
                        choices=[
                            ("REGULAR", "Regular Customer"),
                            ("CORPORATE", "Corporate Customer"),
                            ("VIP", "VIP Customer"),
                            ("STAFF", "Staff Member"),
                        ],
                        default="REGULAR",
                        max_length=20,
                        verbose_name="Customer Type",
                    ),
                ),
                (
                    "duration_type",
                    models.CharField(
                        choices=[
                            ("HOURLY", "Hourly"),
                            ("DAILY", "Daily"),
                            ("WEEKLY", "Weekly"),
                            ("MONTHLY", "Monthly"),
                            ("YEARLY", "Yearly"),
                        ],
                        max_length=20,
                        verbose_name="Duration Type",
                    ),
                ),
                (
                    "base_price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Base Price",
                    ),
                ),
                (
                    "price_per_unit",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Price Per Unit",
                    ),
                ),
                (
                    "hourly_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Hourly Rate",
                    ),
                ),
                (
                    "daily_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Daily Rate",
                    ),
                ),
                (
                    "weekly_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Weekly Rate",
                    ),
                ),
                (
                    "monthly_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Monthly Rate",
                    ),
                ),
                (
                    "discount_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Discount Percentage",
                    ),
                ),
                (
                    "bulk_discount_threshold",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Bulk Discount Threshold"
                    ),
                ),
                (
                    "bulk_discount_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Bulk Discount Percentage",
                    ),
                ),
                (
                    "seasonal_multiplier",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.0,
                        max_digits=3,
                        verbose_name="Seasonal Multiplier",
                    ),
                ),
                (
                    "valid_from",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Valid From"
                    ),
                ),
                (
                    "valid_to",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Valid Until"
                    ),
                ),
                (
                    "setup_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Setup Fee",
                    ),
                ),
                (
                    "delivery_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Delivery Fee",
                    ),
                ),
                (
                    "late_return_fee_per_day",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Late Return Fee Per Day",
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(default=0, verbose_name="Priority"),
                ),
                (
                    "overrides_lower_priority",
                    models.BooleanField(
                        default=False, verbose_name="Overrides Lower Priority"
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pricing_rules",
                        to="products.product",
                        verbose_name="Product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Pricing",
                "verbose_name_plural": "Product Pricing Rules",
                "ordering": ["product", "customer_type", "priority", "duration_type"],
            },
        ),
        migrations.CreateModel(
            name="ProductReview",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Rating",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=200, verbose_name="Review Title"),
                ),
                ("comment", models.TextField(verbose_name="Review Comment")),
                (
                    "is_verified_purchase",
                    models.BooleanField(
                        default=False, verbose_name="Verified Purchase"
                    ),
                ),
                (
                    "is_approved",
                    models.BooleanField(default=False, verbose_name="Is Approved"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="products.product",
                        verbose_name="Product",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_reviews",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Review",
                "verbose_name_plural": "Product Reviews",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="productcategory",
            index=models.Index(fields=["name"], name="products_pr_name_863729_idx"),
        ),
        migrations.AddIndex(
            model_name="productcategory",
            index=models.Index(
                fields=["parent"], name="products_pr_parent__84d628_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productcategory",
            index=models.Index(
                fields=["is_featured"], name="products_pr_is_feat_26635f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["owner"], name="products_pr_owner_i_dfa922_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["category", "status"], name="products_pr_categor_75eeb5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["sku"], name="products_pr_sku_ca0cdc_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["is_rentable", "status"], name="products_pr_is_rent_535322_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["is_featured", "is_popular"],
                name="products_pr_is_feat_b2686d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["admin_approved"], name="products_pr_admin_a_01ef98_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productimage",
            index=models.Index(
                fields=["product", "is_primary"], name="products_pr_product_1b7905_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productmaintenance",
            index=models.Index(
                fields=["product", "status"], name="products_pr_product_11ea39_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productmaintenance",
            index=models.Index(
                fields=["scheduled_date"], name="products_pr_schedul_e74e0c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productmaintenance",
            index=models.Index(
                fields=["assigned_technician"], name="products_pr_assigne_133ed2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productmaintenance",
            index=models.Index(fields=["status"], name="products_pr_status_7d0ea3_idx"),
        ),
        migrations.AddIndex(
            model_name="productpricing",
            index=models.Index(
                fields=["product", "customer_type"],
                name="products_pr_product_3b07e5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="productpricing",
            index=models.Index(
                fields=["valid_from", "valid_to"], name="products_pr_valid_f_6d3047_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productpricing",
            index=models.Index(
                fields=["priority"], name="products_pr_priorit_7624d5_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="productpricing",
            unique_together={("product", "customer_type", "duration_type", "priority")},
        ),
        migrations.AddIndex(
            model_name="productreview",
            index=models.Index(
                fields=["product", "rating"], name="products_pr_product_739017_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productreview",
            index=models.Index(
                fields=["user", "created_at"], name="products_pr_user_id_f49ca3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productreview",
            index=models.Index(
                fields=["is_approved"], name="products_pr_is_appr_790eda_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="productreview",
            unique_together={("product", "user")},
=======
            name='ProductCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Category Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Category Slug')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='category_images/', verbose_name='Category Image')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icon Class')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Sort Order')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Is Featured')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='products.productcategory', verbose_name='Parent Category')),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=200, verbose_name='Product Name')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='Product Slug')),
                ('sku', models.CharField(max_length=100, unique=True, verbose_name='SKU')),
                ('short_description', models.TextField(max_length=500, verbose_name='Short Description')),
                ('description', models.TextField(verbose_name='Long Description')),
                ('specifications', models.JSONField(blank=True, default=dict, verbose_name='Specifications')),
                ('features', models.JSONField(blank=True, default=list, verbose_name='Features')),
                ('dimensions', models.JSONField(blank=True, default=dict, verbose_name='Dimensions')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Weight (kg)')),
                ('color', models.CharField(blank=True, max_length=50, verbose_name='Color')),
                ('material', models.CharField(blank=True, max_length=100, verbose_name='Material')),
                ('brand', models.CharField(blank=True, max_length=100, verbose_name='Brand')),
                ('model', models.CharField(blank=True, max_length=100, verbose_name='Model')),
                ('condition', models.CharField(choices=[('NEW', 'New'), ('EXCELLENT', 'Excellent'), ('GOOD', 'Good'), ('FAIR', 'Fair'), ('POOR', 'Poor')], default='GOOD', max_length=20, verbose_name='Condition')),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('RENTED', 'Rented'), ('MAINTENANCE', 'Under Maintenance'), ('RETIRED', 'Retired'), ('RESERVED', 'Reserved')], default='AVAILABLE', max_length=20, verbose_name='Status')),
                ('total_quantity', models.PositiveIntegerField(default=1, verbose_name='Total Quantity')),
                ('available_quantity', models.PositiveIntegerField(default=1, verbose_name='Available Quantity')),
                ('reserved_quantity', models.PositiveIntegerField(default=0, verbose_name='Reserved Quantity')),
                ('minimum_quantity', models.PositiveIntegerField(default=1, verbose_name='Minimum Quantity')),
                ('deposit_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Security Deposit Amount')),
                ('warehouse_location', models.CharField(blank=True, max_length=100, verbose_name='Warehouse Location')),
                ('storage_requirements', models.TextField(blank=True, verbose_name='Storage Requirements')),
                ('is_rentable', models.BooleanField(default=True, verbose_name='Is Rentable')),
                ('minimum_rental_duration', models.PositiveIntegerField(default=1, verbose_name='Minimum Rental Duration (hours)')),
                ('maximum_rental_duration', models.PositiveIntegerField(default=8760, verbose_name='Maximum Rental Duration (hours)')),
                ('main_image', models.ImageField(blank=True, null=True, upload_to='product_images/', verbose_name='Main Image')),
                ('images', models.JSONField(blank=True, default=list, verbose_name='Additional Images')),
                ('meta_title', models.CharField(blank=True, max_length=200, verbose_name='Meta Title')),
                ('meta_description', models.TextField(blank=True, verbose_name='Meta Description')),
                ('keywords', models.TextField(blank=True, verbose_name='Keywords')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Is Featured')),
                ('is_popular', models.BooleanField(default=False, verbose_name='Is Popular')),
                ('admin_approved', models.BooleanField(default=False, verbose_name='Admin Approved')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Sort Order')),
                ('purchase_date', models.DateField(blank=True, null=True, verbose_name='Purchase Date')),
                ('warranty_expiry', models.DateField(blank=True, null=True, verbose_name='Warranty Expiry')),
                ('last_maintenance', models.DateField(blank=True, null=True, verbose_name='Last Maintenance')),
                ('next_maintenance', models.DateField(blank=True, null=True, verbose_name='Next Maintenance')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_products', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to='products.productcategory', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('image', models.ImageField(upload_to='product_images/', verbose_name='Image')),
                ('alt_text', models.CharField(blank=True, max_length=200, verbose_name='Alt Text')),
                ('caption', models.CharField(blank=True, max_length=200, verbose_name='Caption')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Sort Order')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Is Primary')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_images', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['product', 'sort_order', '-is_primary'],
            },
        ),
        migrations.CreateModel(
            name='ProductMaintenance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('maintenance_type', models.CharField(choices=[('PREVENTIVE', 'Preventive Maintenance'), ('CORRECTIVE', 'Corrective Maintenance'), ('INSPECTION', 'Inspection'), ('REPAIR', 'Repair'), ('CLEANING', 'Cleaning')], max_length=20, verbose_name='Maintenance Type')),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='SCHEDULED', max_length=20, verbose_name='Status')),
                ('scheduled_date', models.DateTimeField(verbose_name='Scheduled Date')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Start Date')),
                ('completed_date', models.DateTimeField(blank=True, null=True, verbose_name='Completed Date')),
                ('description', models.TextField(verbose_name='Description')),
                ('technician_notes', models.TextField(blank=True, verbose_name='Technician Notes')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cost')),
                ('assigned_technician', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_maintenance', to=settings.AUTH_USER_MODEL, verbose_name='Assigned Technician')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_records', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Maintenance',
                'verbose_name_plural': 'Product Maintenance Records',
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='ProductPricing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('customer_type', models.CharField(choices=[('REGULAR', 'Regular Customer'), ('CORPORATE', 'Corporate Customer'), ('VIP', 'VIP Customer'), ('STAFF', 'Staff Member')], default='REGULAR', max_length=20, verbose_name='Customer Type')),
                ('duration_type', models.CharField(choices=[('HOURLY', 'Hourly'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('YEARLY', 'Yearly')], max_length=20, verbose_name='Duration Type')),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Base Price')),
                ('price_per_unit', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Price Per Unit')),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Hourly Rate')),
                ('daily_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Daily Rate')),
                ('weekly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Weekly Rate')),
                ('monthly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Monthly Rate')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Discount Percentage')),
                ('bulk_discount_threshold', models.PositiveIntegerField(default=0, verbose_name='Bulk Discount Threshold')),
                ('bulk_discount_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Bulk Discount Percentage')),
                ('seasonal_multiplier', models.DecimalField(decimal_places=2, default=1.0, max_digits=3, verbose_name='Seasonal Multiplier')),
                ('valid_from', models.DateTimeField(blank=True, null=True, verbose_name='Valid From')),
                ('valid_to', models.DateTimeField(blank=True, null=True, verbose_name='Valid Until')),
                ('setup_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Setup Fee')),
                ('delivery_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Delivery Fee')),
                ('late_return_fee_per_day', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Late Return Fee Per Day')),
                ('priority', models.PositiveIntegerField(default=0, verbose_name='Priority')),
                ('overrides_lower_priority', models.BooleanField(default=False, verbose_name='Overrides Lower Priority')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_rules', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Pricing',
                'verbose_name_plural': 'Product Pricing Rules',
                'ordering': ['product', 'customer_type', 'priority', 'duration_type'],
            },
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
                ('title', models.CharField(max_length=200, verbose_name='Review Title')),
                ('comment', models.TextField(verbose_name='Review Comment')),
                ('is_verified_purchase', models.BooleanField(default=False, verbose_name='Verified Purchase')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Is Approved')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product', verbose_name='Product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_reviews', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Product Review',
                'verbose_name_plural': 'Product Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='productcategory',
            index=models.Index(fields=['name'], name='products_pr_name_863729_idx'),
        ),
        migrations.AddIndex(
            model_name='productcategory',
            index=models.Index(fields=['parent'], name='products_pr_parent__84d628_idx'),
        ),
        migrations.AddIndex(
            model_name='productcategory',
            index=models.Index(fields=['is_featured'], name='products_pr_is_feat_26635f_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['owner'], name='products_pr_owner_i_dfa922_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'status'], name='products_pr_categor_75eeb5_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sku'], name='products_pr_sku_ca0cdc_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_rentable', 'status'], name='products_pr_is_rent_535322_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_featured', 'is_popular'], name='products_pr_is_feat_b2686d_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['admin_approved'], name='products_pr_admin_a_01ef98_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['product', 'is_primary'], name='products_pr_product_1b7905_idx'),
        ),
        migrations.AddIndex(
            model_name='productmaintenance',
            index=models.Index(fields=['product', 'status'], name='products_pr_product_11ea39_idx'),
        ),
        migrations.AddIndex(
            model_name='productmaintenance',
            index=models.Index(fields=['scheduled_date'], name='products_pr_schedul_e74e0c_idx'),
        ),
        migrations.AddIndex(
            model_name='productmaintenance',
            index=models.Index(fields=['assigned_technician'], name='products_pr_assigne_133ed2_idx'),
        ),
        migrations.AddIndex(
            model_name='productmaintenance',
            index=models.Index(fields=['status'], name='products_pr_status_7d0ea3_idx'),
        ),
        migrations.AddIndex(
            model_name='productpricing',
            index=models.Index(fields=['product', 'customer_type'], name='products_pr_product_3b07e5_idx'),
        ),
        migrations.AddIndex(
            model_name='productpricing',
            index=models.Index(fields=['valid_from', 'valid_to'], name='products_pr_valid_f_6d3047_idx'),
        ),
        migrations.AddIndex(
            model_name='productpricing',
            index=models.Index(fields=['priority'], name='products_pr_priorit_7624d5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productpricing',
            unique_together={('product', 'customer_type', 'duration_type', 'priority')},
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['product', 'rating'], name='products_pr_product_739017_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['user', 'created_at'], name='products_pr_user_id_f49ca3_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['is_approved'], name='products_pr_is_appr_790eda_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productreview',
            unique_together={('product', 'user')},
>>>>>>> 820dc79f10db0b2f3469b0f9edcee952c348957c
        ),
    ]
